@using System.Net
@using TobyBlazor.Models
@using TobyBlazor.Data
@using TobyBlazor.Other

<div style="margin-top: 25px;">
    @if (!RecentlyPlayed)
    {
        <ul class="list-group">
            @foreach (var video in Videos)
            {
                <li @key=video.YTId @onclick="@(() => VideoSelected(video))" class="list-group-item list-group-item-action d-flex justify-content-lg-start align-items-center @(SelectedVideo != null && video.YTId == SelectedVideo.YTId ? "active" : "")">
                    <img class="mr-3" src="@HelperExtensions.GetDefaultVideoThumbnail(video.YTId)" />
                    <h5 class="mt-0" style="text-align:left;">@WebUtility.HtmlDecode(video.Title)</h5>
                </li>
            }
        </ul>
    }
    else
    {
        <ul class="list-group list-group-horizontal-sm" style="flex-wrap: wrap;">
            @foreach (var video in Videos)
            {
                <li class="list-group-item flex-fill text-center @(SelectedVideo != null && video.YTId == SelectedVideo.YTId ? "active" : "")" @key=video.YTId @onclick="@(() => VideoSelected(video))">
                    <img src="@HelperExtensions.GetDefaultVideoThumbnail(video.YTId)" style="width:96px;height:auto;" />
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public List<Video> Videos { get; set; }

    [Parameter]
    public bool RecentlyPlayed { get; set; } = false;

    [Parameter]
    public EventCallback<Video> OnSelectedVideo { get; set; }

    private readonly IVideoRepository videos = new VideoRepository();
    private Video SelectedVideo { get; set; }

    protected override void OnInitialized()
    {
        if (RecentlyPlayed)
        {
            Videos = videos.GetRecentlyPlayedVideos(10);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (SelectedVideo != null)
        {
            SelectedVideo = null;
        }
    }

    private async Task VideoSelected(Video video)
    {
        SelectedVideo = video;
        videos.AddVideoToRecentlyPlayed(video);
        await OnSelectedVideo.InvokeAsync(video);
    }
}
