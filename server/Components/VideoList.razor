@using System.Net
@using TobyBlazor.Models
@using TobyBlazor.Data

<div style="margin-top:25px;">
    <div class="list-group">
        @foreach (var video in Videos)
        {
            <button type="button" @onclick="@(() => VideoSelected(video))" class="list-group-item list-group-item-action d-flex justify-content-lg-start align-items-center @(SelectedVideo != null && video.YTId == SelectedVideo.YTId ? "active" : "")">
                <img class="mr-3" src="@GetVideoThumbnail(video.YTId)" />
                <h5 class="mt-0" style="text-align:left;">@WebUtility.HtmlDecode(video.Title)</h5>
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<Video> Videos { get; set; }

    [Parameter]
    public EventCallback<Video> OnSelectedVideo { get; set; }

    [Parameter]
    public bool ClearSelection { get; set; } = true;

    private readonly IVideoRepository videos = new VideoRepository();
    private Video SelectedVideo { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // This is not a very good solution to clear the currently selected 
        // video but we'll use it for now until something better comes along.
        if(ClearSelection)
        {
            await Task.Run(() => { SelectedVideo = null; });
        }
    }

    private string GetVideoThumbnail(string ytid)
    {
        return String.Format("https://i.ytimg.com/vi/{0}/default.jpg", ytid);
    }

    private async Task VideoSelected(Video video)
    {
        SelectedVideo = video;
        videos.AddToRecentlyPlayed(video);
        await OnSelectedVideo.InvokeAsync(video);
    }

    public void OnVideoDismissed()
    {
        SelectedVideo = null;
    }
}
