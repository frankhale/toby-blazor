<div style="margin-top:25px;">
    <nav class="navbar navbar-light bg-light">
        <div class="navbar-brand">
            <button type="button" class="btn btn-warning" disabled="@ApplyButtonDisabled "@onclick="@OnApplyButtonClicked">Apply</button>
            <button type="button" class="btn btn-danger" disabled="@DeleteButtonDisabled "@onclick="@OnDeleteButtonClicked">Delete</button>
        </div>

        @if (!RecentlyPlayed)
        {
            <div class="form-inline">
                <form @onsubmit=@OnSearchButtonClicked>
                    <div class="input-group">
                        <input type="text"
                               class="form-control"
                               placeholder="Search for video..."
                               aria-label="Search for video"
                               aria-describedby="button-addon4"
                               @oninput=@OnSearchTermChanged>
                        <div class="input-group-append" id="button-addon4">
                            <button class="btn btn btn-success" type="button" @onclick=@OnSearchButtonClicked disabled=@SearchButtonDisabled>Search</button>
                        </div>
                    </div>
                </form>
            </div>
        }
    </nav>
    <div class="list-group">
        @foreach (var video in Videos)
        {
            <div @key=video class="list-group-item d-flex justify-content-between align-items-center">
                <div style="margin-left: 10px; margin-right:10px; margin-bottom: 30px;">
                    <input type="checkbox" class="form-check-input" @onchange="eventArgs => { OnCheckboxClicked(video.YTId, eventArgs.Value); }"/>
                </div>
                <div>
                    <img class="mr-3" src="@GetVideoThumbnail(video.YTId)" title=@WebUtility.HtmlDecode(video.Title)/>
                </div>
                <div class="w-100">
                    <h5>@video.Title</h5>
                </div>
                <div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @video.Group
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                            @foreach (var group in Task.Run(async () => await _videos.AllGroupsAsync()).Result)
                            {
                                @if (group.Name != "Recently Played")
                                {
                                    <button class="dropdown-item" type="button" @onclick="eventArgs => { OnMenuItemSelected(video, group.Name); }">@group.Name</button>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter] public EventCallback OnDeleteVideo { get; set; }

    [Parameter] public List<Video> Videos { get; set; }

    [Parameter] public bool RecentlyPlayed { get; set; }

    private readonly VideoRepository _videos = new();
    private string SearchTerm { get; set; } = string.Empty;
    private bool DeleteButtonDisabled { get; set; } = true;
    private bool ApplyButtonDisabled { get; set; } = true;
    private bool SearchButtonDisabled { get; set; } = true;
    private List<string> _videosToDelete = [];
    private List<Tuple<string, string>> _videoGroupsToChange = [];

    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString();

        if (!string.IsNullOrEmpty(SearchTerm))
        {
            SearchButtonDisabled = false;
        }
        else
        {
            SearchButtonDisabled = true;

            Videos = await _videos.AllVideosAsync();
        }
    }

    private static string GetVideoThumbnail(string ytid)
    {
        return $"https://i.ytimg.com/vi/{ytid}/default.jpg";
    }

    private async Task SearchAsync(string searchTerm)
    {
        if (!string.IsNullOrEmpty(searchTerm))
        {
            Videos = searchTerm switch
            {
                _ when searchTerm.StartsWith("/all", StringComparison.InvariantCultureIgnoreCase) => await _videos.AllVideosAsync(),
                _ => await _videos.FindVideoAsync(searchTerm)
            };
        }
    }

    private void OnMenuItemSelected(Video video, string group)
    {
        var found = _videoGroupsToChange.Find(x => x.Item1 == video.YTId);

        if (video.Group != group && found == null)
        {
            video.Group = group;
            _videoGroupsToChange.Add(new Tuple<string, string>(video.YTId, group));
        }
        else
        {
            if (found != null)
            {
                _videoGroupsToChange.Remove(found);
            }
        }

        ApplyButtonDisabled = _videoGroupsToChange.Count <= 0;
    }

    private void OnCheckboxClicked(string ytid, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!_videosToDelete.Contains(ytid))
            {
                _videosToDelete.Add(ytid);
            }
        }
        else
        {
            _videosToDelete.Remove(ytid);
        }

        DeleteButtonDisabled = _videosToDelete.Count <= 0;
    }

    private async Task OnDeleteButtonClicked()
    {
        if (_videosToDelete.Count > 0)
        {
            var deleteVideos = new List<Video>();

            _videosToDelete.ForEach(async x =>
            {
                var foundVideo = await _videos.FindVideoByYtIdAsync(x);
                Videos.RemoveAll(v => v.YTId == x);

                if (foundVideo != null)
                {
                    deleteVideos.Add(foundVideo);
                }
            });

            if (deleteVideos.Count > 0)
            {
                await _videos.DeleteVideoRangeAsync(deleteVideos);

                _videosToDelete = [];
                DeleteButtonDisabled = true;

                if (!RecentlyPlayed)
                {
                    if (!string.IsNullOrEmpty(SearchTerm))
                    {
                        await SearchAsync(SearchTerm);
                    }
                    else
                    {
                        Videos = await _videos.AllVideosAsync();
                    }
                }
            }

            await OnDeleteVideo.InvokeAsync(null);
        }
    }

    private void OnApplyButtonClicked()
    {
        if (_videoGroupsToChange.Count <= 0) return;
        _videoGroupsToChange.ForEach(async x => { await _videos.UpdateVideoGroupAsync(x.Item1, x.Item2); });

        _videoGroupsToChange = [];
        ApplyButtonDisabled = true;
    }

    private async Task OnSearchButtonClicked()
    {
        await SearchAsync(SearchTerm);
    }

}