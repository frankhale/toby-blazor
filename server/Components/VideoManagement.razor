@using TobyBlazor.Data
@using TobyBlazor.Models
@using System.Net

<div style="margin-top:25px;">
    <nav class="navbar navbar-light bg-light">
        <div class="navbar-brand">
            <button type="button" class="btn btn-warning" disabled=@ApplyButtonDisabled @onclick=@OnApplyButtonClicked>Apply</button>
            <button type="button" class="btn btn-danger" disabled=@DeleteButtonDisabled @onclick=@OnDeleteButtonClicked>Delete</button>
        </div>
        <div class="form-inline">
            <form @onsubmit=@OnSearchButtonClicked>
                <div class="input-group">
                    <input type="text" class="form-control" @bind=@SearchTerm placeholder="Search for video..." aria-label="Search for video" aria-describedby="button-addon4"> 
                    <div class="input-group-append" id="button-addon4">                        
                        <button class="btn btn btn-success" type="button" @onclick=@OnSearchButtonClicked>Search</button>
                    </div>
                </div>
            </form>
        </div>
    </nav>

    <div class="list-group">
        @foreach (var video in Videos)
        {
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <div style="margin-left: 10px; margin-right:10px; margin-bottom: 30px;">
                    <input type="checkbox" class="form-check-input" @onchange="eventArgs => { OnCheckboxClicked(video.YTId, eventArgs.Value); }" />
                </div>
                <div><img class="mr-3" src="@GetVideoThumbnail(video.YTId)" /></div>
                <div class="w-100"><h5>@WebUtility.HtmlDecode(video.Title)</h5></div>
                <div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @video.Group
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                            @foreach (var group in videos.AllGroups())
                            {
                                @if (group.Name != "Recently Played")
                                {
                                    <button class="dropdown-item" type="button" @onclick="eventArgs => { OnMenuItemSelected(video, group.Name); }">@group.Name</button>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private readonly IVideoRepository videos = new VideoRepository();

    private string SearchTerm { get; set; } = String.Empty;
    private bool DeleteButtonDisabled { get; set; } = true;
    private bool ApplyButtonDisabled { get; set; } = true;

    private List<Video> Videos { get; set; } = new List<Video>();
    private List<string> VideosToDelete = new List<string>();
    private List<Tuple<string, string>> VideoGroupsToChange = new List<Tuple<string, string>>();

    protected override void OnInitialized()
    {
        Videos = videos.AllVideos();
    }

    private string GetVideoThumbnail(string ytid)
    {
        return String.Format("https://i.ytimg.com/vi/{0}/default.jpg", ytid);
    }

    private void Search(string searchTerm)
    {
        if (!String.IsNullOrEmpty(searchTerm))
        {
            Videos = searchTerm switch
            {
                _ when searchTerm.ToLower().StartsWith("/all") => videos.AllVideos(),
                _ => videos.FindVideo(searchTerm)
            };
        }
    }

    private void OnMenuItemSelected(Video video, string group)
    {
        var found = VideoGroupsToChange.Find(x => x.Item1 == video.YTId);

        if (video.Group != group && found == null)
        {
            video.Group = group;
            VideoGroupsToChange.Add(new Tuple<string, string>(video.YTId, group));
        }
        else
        {
            if (found != null)
            {
                VideoGroupsToChange.Remove(found);
            }
        }

        ApplyButtonDisabled = (VideoGroupsToChange.Count > 0) ? false : true;
    }

    private void OnCheckboxClicked(string ytid, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!VideosToDelete.Contains(ytid))
            {
                VideosToDelete.Add(ytid);
            }
        }
        else
        {
            if (VideosToDelete.Contains(ytid))
            {
                VideosToDelete.Remove(ytid);
            }
        }

        DeleteButtonDisabled = (VideosToDelete.Count > 0) ? false : true;
    }

    private void OnDeleteButtonClicked()
    {
        if (VideosToDelete.Count > 0)
        {
            var deleteVideos = new List<Video>();

            VideosToDelete.ForEach(x =>
            {
                var foundVideo = videos.FindVideoByYTId(x);
                if (foundVideo != null)
                {
                    deleteVideos.Add(foundVideo);
                }
            });

            if (deleteVideos.Count > 0)
            {
                videos.DeleteVideoRange(deleteVideos);
                VideosToDelete = new List<string>();
                DeleteButtonDisabled = true;

                if (!String.IsNullOrEmpty(SearchTerm))
                { 
                    Search(SearchTerm);
                }
                else
                {
                    Videos = videos.AllVideos();
                }
            }
        }
    }

    private void OnApplyButtonClicked()
    {
        if (VideoGroupsToChange.Count > 0)
        {
            VideoGroupsToChange.ForEach(x =>
            {
                videos.UpdateVideoGroup(x.Item1, x.Item2);
            });

            VideoGroupsToChange = new List<Tuple<string, string>>();
            ApplyButtonDisabled = true;
        }
    }

    private void OnSearchButtonClicked()
    {
        Search(SearchTerm);
    }
}
