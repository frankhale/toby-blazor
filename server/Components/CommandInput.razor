@namespace TobyBlazor.Components

@using TobyBlazor.Data
@using TobyBlazor.Models

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text">
            <img src="css/bootstrap/icons/search.svg" width="16" height="16" title="Search" style="filter: invert(100%);">
        </span>
    </div>
    <input class="form-control mw-100 w-100" type="search" placeholder="Search" aria-label="Search"
           spellcheck="false"
           @bind=@SearchTerm
           @onkeyup=@(eventArgs => OnKeyPress(eventArgs.Key)) />
</div>

@code {
    private readonly IVideoRepository videos = new VideoRepository();

    private string SearchTerm { get; set; } = "";

    [Parameter]
    public EventCallback<SearchResult> OnSearch { get; set; }

    private SearchResult CreateResult(SearchResultType type, Func<Message> action)
    {
        return CreateResult(type, null, null, action);
    }

    private SearchResult CreateResult(SearchResultType type, List<Video> videos)
    {
        return CreateResult(type, null, videos, null);
    }

    private SearchResult CreateResult(SearchResultType type, Message message, List<Video> videos, Func<Message> action) {
        var result = new SearchResult();

        if(action != null) {
            result.Message = action();
        } else {
            result.Message = message;
        }

        result.Type = type;
        result.Videos = videos;

        return result;
    }

    private async void OnKeyPress(string key)
    {
        static bool MatchesCommandList(string value, params string[] commands) => (commands.Where(x => x == value).FirstOrDefault() != null) ? true : false;

        if (key == "Enter" && !String.IsNullOrEmpty(SearchTerm))
        {
            var searchValue = SearchTerm.ToLower().Split(new char[] { ' ' }, 2);

            var result =searchValue switch
            {
                //_ when MatchesCommandList(searchValue[0], "/t", "/test") =>
                //    CreateResult(SearchResultType.Command,
                //    () => {
                //        return new Message() { Value = "This is a test message...", Type = "alert-warning" };
                //    }),
                _ when MatchesCommandList(searchValue[0], "/clear") => CreateResult(SearchResultType.Search, new List<Video>()),
                _ when MatchesCommandList(searchValue[0], "/mg", "/manage") => CreateResult(SearchResultType.Manage, videos.AllVideos()),
                _ when MatchesCommandList(searchValue[0], "/crp", "/clear-recently-played") =>
                    CreateResult(SearchResultType.Command,
                        () => {
                            videos.DeleteRangeByGroup("Recently Played");
                            return new Message() { Value = "Deleted all the videos in the Recently Played group", Type = "alert-danger" };
                        }
                    ),
                _ => CreateResult(SearchResultType.Search, await videos.Search(SearchTerm))
            };

            await OnSearch.InvokeAsync(result);
        }
    }
}
