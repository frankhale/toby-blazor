@if (Pages.Count > 0)
{
    if (Pages.Count > 1)
    {
        <nav aria-label="Video page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(PreviousButtonDisabled ? "disabled" : "")">
                    <button class="page-link" aria-label="Previous" @onclick=@OnPreviousButtonClick>
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>

                @foreach (var i in PageIndices[CurrentPageLinkPage - 1])
                {
                    <li class="page-item @(CurrentPage == i ? "active" : "")">
                        <button class="page-link" @onclick=@(eventArgs => OnPageButtonClick(i))>
                            @i
                        </button>
                    </li>
                }

                <li class="page-item @(NextButtonDisabled ? "disabled" : "")">
                    <button class="page-link" aria-label="Next" @onclick=@OnNextButtonClick>
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>
    }

    <div>
        @Content(Pages[CurrentPage - 1])
    </div>
}
else
{
    if (!string.IsNullOrEmpty(Message))
    {
        <Notification Message=@Message NotificationType="alert-warning" OnClose=@OnNotificationClose/>
    }
}

@code {

    private const int ChunkSize = 10;

    private readonly VideoRepository _videos = new();

    [Parameter] public List<Video> Videos { get; set; }

    [Parameter] public RenderFragment<List<Video>> Content { get; set; }

    [Parameter] public bool RecentlyPlayed { get; set; }

    private List<List<Video>> Pages { get; set; }
    private List<List<int>> PageIndices { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int CurrentPageLinkPage { get; set; } = 1;
    private string Message { get; set; } = string.Empty;
    private bool PreviousButtonDisabled { get; set; }
    private bool NextButtonDisabled { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await InitializePages(true);
    }

    private async Task InitializePages(bool resetCurrentPage = false)
    {
        var preferences = await _videos.GetCurrentPreferences();
        var preferredPage = 1;
        var preferredLinkPage = 1;

        Pages = Videos.ChunkBy(ChunkSize);
        PageIndices = Enumerable.Range(1, Pages.Count).ToList().ChunkBy(ChunkSize);

        if (preferences != null)
        {
            preferredPage = RecentlyPlayed ? preferences.CurrentRecentlyPlayedVideoPage : preferences.CurrentVideoPage;
            preferredLinkPage = preferences.CurrentVideoPageLinkPage;

            if (preferredPage == 0 || preferredPage > Pages.Count) preferredPage = 1;

            if (preferredLinkPage == 0 || preferredLinkPage > PageIndices.Count) preferredLinkPage = 1;
        }

        if (resetCurrentPage)
        {
            CurrentPage = preferredPage;
            CurrentPageLinkPage = preferredLinkPage;
        }

        if (PageIndices.Count <= 0) Message = "There are no results";

        TogglePrevNextButtonsDisabled();
    }

    private void TogglePrevNextButtonsDisabled()
    {
        PreviousButtonDisabled = CurrentPageLinkPage == 1;
        NextButtonDisabled = CurrentPageLinkPage >= PageIndices.Count;
    }

    private async Task OnPageButtonClick(int page)
    {
        await _videos.SetCurrentVideoPage(RecentlyPlayed, page, CurrentPageLinkPage);

        CurrentPage = page;
    }

    private async Task OnPreviousButtonClick()
    {
        if (CurrentPageLinkPage > 1) CurrentPageLinkPage -= 1;

        await _videos.SetCurrentVideoPage(RecentlyPlayed, CurrentPage, CurrentPageLinkPage);

        TogglePrevNextButtonsDisabled();
    }

    private async Task OnNextButtonClick()
    {
        if (CurrentPageLinkPage < PageIndices.Count) CurrentPageLinkPage += 1;

        await _videos.SetCurrentVideoPage(RecentlyPlayed, CurrentPage, CurrentPageLinkPage);

        TogglePrevNextButtonsDisabled();
    }

    private void OnNotificationClose()
    {
        Message = string.Empty;
    }

}