@page "/"

@using System.Net
@using TobyBlazor.Models
@using TobyBlazor.Data

@inject IJSRuntime jsRuntime

<div id="main-ui">
    <CommandInput OnSearch=@OnSearchResults />

    @if (Result.Type == SearchResultType.Manage)
    {
        <VideoManagement />
    }
    else if (Result.Type == SearchResultType.Search)
    {
        <VideoList Videos=@Result.Videos OnSelectedVideo=@OnSelectedVideo />
    }
</div>

@if (SelectedVideo != null && !String.IsNullOrEmpty(SelectedVideo.YTId))
{
    <WindowTitle Title=@WebUtility.HtmlDecode(SelectedVideo.Title) />
    <VideoPopup SelectedVideo=@SelectedVideo OnPopupClosed=@OnVideoDismissed />
}
else
{
    <WindowTitle Title="Toby" />
}

@if (Result.Message != null && !String.IsNullOrEmpty(Result.Message.Value))
{
    <Notification Message=@Result.Message.Value NotificationType=@Result.Message.Type OnClose=@OnNotificationClose />
}

@code {
    private readonly IVideoRepository videos = new VideoRepository();
    private SearchResult Result { get; set; } = new SearchResult();
    private Video SelectedVideo { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("setModalCloseStopVideo", "ytModal");
        }
    }

    public void OnSearchResults(SearchResult result)
    {
        Result = result;
    }

    public void OnNotificationClose()
    {
        if (Result != null)
        {
            Result = new SearchResult();
        }
    }

    public void OnSelectedVideo(Video video)
    {
        SelectedVideo = video;
    }

    public void OnVideoDismissed()
    {
        SelectedVideo = null;
    }
}
